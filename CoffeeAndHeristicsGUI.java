/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package coffeeandheuristics;

import javax.swing.Timer;


/**
 *
 * @author Jesse
 */
public class CoffeeAndHeristicsGUI extends javax.swing.JFrame {
    
    boolean boilerFull = false;
    boolean boilerOn = false;
    boolean potFull = false;
    boolean valveClosed = false;
    boolean powerOn = false;
    boolean heaterPlateOn = false;
    boolean potOnHeater = false;
 

    /**
     * Creates new form CoffeeAndHeristicsGUI
     */
    public CoffeeAndHeristicsGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainWindowFrame = new javax.swing.JPanel();
        UserButtonFrame = new javax.swing.JPanel();
        BrewButton = new javax.swing.JButton();
        FillBoiler = new javax.swing.JButton();
        PotOnOff = new javax.swing.JButton();
        PowerButton = new javax.swing.JButton();
        EmptyPot = new javax.swing.JButton();
        SensorButtonFrame = new javax.swing.JPanel();
        WarmerPlateElementState = new javax.swing.JButton();
        BoilerElementState = new javax.swing.JButton();
        BoilerWaterLevel = new javax.swing.JButton();
        PotWaterLevel = new javax.swing.JButton();
        SteamValveState = new javax.swing.JButton();
        AnimationFrame = new javax.swing.JPanel();
        TextOutputScrollPanel = new javax.swing.JScrollPane();
        TextOutputFrame = new javax.swing.JTextArea();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        FileMenuItemSave = new javax.swing.JMenuItem();
        FileMenuItemQuit = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MainWindowFrame.setBackground(new java.awt.Color(153, 153, 153));
        MainWindowFrame.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("")));

        UserButtonFrame.setBackground(new java.awt.Color(153, 153, 153));
        UserButtonFrame.setRequestFocusEnabled(false);

        BrewButton.setText("Brew");
        BrewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrewButtonActionPerformed(evt);
            }
        });

        FillBoiler.setText("Fill Boiler");
        FillBoiler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FillBoilerActionPerformed(evt);
            }
        });

        PotOnOff.setText("Pot on/off");
        PotOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PotOnOffActionPerformed(evt);
            }
        });

        PowerButton.setText("Power on/off");
        PowerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PowerButtonActionPerformed(evt);
            }
        });

        EmptyPot.setText("Empty Pot");
        EmptyPot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmptyPotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UserButtonFrameLayout = new javax.swing.GroupLayout(UserButtonFrame);
        UserButtonFrame.setLayout(UserButtonFrameLayout);
        UserButtonFrameLayout.setHorizontalGroup(
            UserButtonFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserButtonFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UserButtonFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmptyPot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PotOnOff, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BrewButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FillBoiler, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(PowerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        UserButtonFrameLayout.setVerticalGroup(
            UserButtonFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserButtonFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PowerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PotOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FillBoiler, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BrewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EmptyPot, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        SensorButtonFrame.setBackground(new java.awt.Color(153, 153, 153));

        WarmerPlateElementState.setText("Warmer Plate on/off");
        WarmerPlateElementState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WarmerPlateElementStateActionPerformed(evt);
            }
        });

        BoilerElementState.setText("Boiler on/off");
        BoilerElementState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoilerElementStateActionPerformed(evt);
            }
        });

        BoilerWaterLevel.setText("Boiler empty/full");
        BoilerWaterLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoilerWaterLevelActionPerformed(evt);
            }
        });

        PotWaterLevel.setText("Pot empty/full");
        PotWaterLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PotWaterLevelActionPerformed(evt);
            }
        });

        SteamValveState.setText("Valve open/closed");
        SteamValveState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SteamValveStateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SensorButtonFrameLayout = new javax.swing.GroupLayout(SensorButtonFrame);
        SensorButtonFrame.setLayout(SensorButtonFrameLayout);
        SensorButtonFrameLayout.setHorizontalGroup(
            SensorButtonFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SensorButtonFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SensorButtonFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SteamValveState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PotWaterLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BoilerWaterLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BoilerElementState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WarmerPlateElementState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        SensorButtonFrameLayout.setVerticalGroup(
            SensorButtonFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SensorButtonFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(WarmerPlateElementState, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BoilerElementState, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BoilerWaterLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PotWaterLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SteamValveState, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout AnimationFrameLayout = new javax.swing.GroupLayout(AnimationFrame);
        AnimationFrame.setLayout(AnimationFrameLayout);
        AnimationFrameLayout.setHorizontalGroup(
            AnimationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );
        AnimationFrameLayout.setVerticalGroup(
            AnimationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        TextOutputFrame.setColumns(20);
        TextOutputFrame.setRows(5);
        TextOutputScrollPanel.setViewportView(TextOutputFrame);

        javax.swing.GroupLayout MainWindowFrameLayout = new javax.swing.GroupLayout(MainWindowFrame);
        MainWindowFrame.setLayout(MainWindowFrameLayout);
        MainWindowFrameLayout.setHorizontalGroup(
            MainWindowFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainWindowFrameLayout.createSequentialGroup()
                .addGroup(MainWindowFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainWindowFrameLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(UserButtonFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AnimationFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SensorButtonFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MainWindowFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TextOutputScrollPanel)))
                .addContainerGap())
        );
        MainWindowFrameLayout.setVerticalGroup(
            MainWindowFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainWindowFrameLayout.createSequentialGroup()
                .addGroup(MainWindowFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainWindowFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(MainWindowFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AnimationFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UserButtonFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(SensorButtonFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TextOutputScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addContainerGap())
        );

        FileMenu.setText("File");

        FileMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        FileMenuItemSave.setText("Save");
        FileMenuItemSave.setToolTipText("Save current state.");
        FileMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuItemSaveActionPerformed(evt);
            }
        });
        FileMenu.add(FileMenuItemSave);

        FileMenuItemQuit.setText("Quit");
        FileMenuItemQuit.setToolTipText("Close window.");
        FileMenuItemQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuItemQuitActionPerformed(evt);
            }
        });
        FileMenu.add(FileMenuItemQuit);

        MenuBar.add(FileMenu);

        HelpMenu.setText("Help");
        MenuBar.add(HelpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainWindowFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainWindowFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

       Timer boilerTimer = new Timer(500, null);
    
    private void FileMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuItemSaveActionPerformed
        TextOutputFrame.append("Saved States. (will actualy implementt soon.) \n");
 
    }//GEN-LAST:event_FileMenuItemSaveActionPerformed

    private void WarmerPlateElementStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WarmerPlateElementStateActionPerformed
        if(heaterPlateOn == false){
            TextOutputFrame.append("Heater On. \n");
            heaterPlateOn = true;
            
        }
        else{
            TextOutputFrame.append("Heater Off. \n");
            heaterPlateOn = false;
        }

    }//GEN-LAST:event_WarmerPlateElementStateActionPerformed

    private void SteamValveStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SteamValveStateActionPerformed
        if(valveClosed == false){
            TextOutputFrame.append("Valve Closed. \n");
            valveClosed = true;
        }
        else{
            TextOutputFrame.append("Valve Open. \n");
            valveClosed = false;
        }
        
    }//GEN-LAST:event_SteamValveStateActionPerformed

    private void BoilerElementStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoilerElementStateActionPerformed
        if(boilerOn == false){
            TextOutputFrame.append("Boiler on \n");
            boilerOn = true;
        }
        else{
            TextOutputFrame.append("Boiler off. \n");
            boilerOn = false;
        }
    }//GEN-LAST:event_BoilerElementStateActionPerformed

    private void BoilerWaterLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoilerWaterLevelActionPerformed
        if(boilerFull == false){
            TextOutputFrame.append("Boiler full \n");
            boilerFull = true;
        }
        else{
            TextOutputFrame.append("Boiler empty. \n");
            boilerFull = false;
        }
    }//GEN-LAST:event_BoilerWaterLevelActionPerformed

    private void PotWaterLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PotWaterLevelActionPerformed
        if(potFull == false){
            TextOutputFrame.append("Pot full \n");
            potFull = true;
        }
        else{
            TextOutputFrame.append("Pot empty. \n");
            potFull = false;
        }
    }//GEN-LAST:event_PotWaterLevelActionPerformed

    private void EmptyPotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmptyPotActionPerformed
        if(potFull == false){
            TextOutputFrame.append("Pot already empty \n");
        }
        else{
            TextOutputFrame.append("Pot empty. \n");
            potFull = false;
        }
    }//GEN-LAST:event_EmptyPotActionPerformed

    private void BrewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrewButtonActionPerformed
        if(powerOn == false){
            TextOutputFrame.append("Power off please turn on \n");
        }else if(boilerFull == false){
            TextOutputFrame.append("Boiler Empty please fill. \n");
        }else if(potOnHeater == false){
            TextOutputFrame.append("Pot missing please place on heater. \n");
        }else if(potFull == true){
            TextOutputFrame.append("Pot full please empty. \n");
        }else{
            TextOutputFrame.append("Brewing. \n");
            TextOutputFrame.append("Finished Brewing. \n");
            potFull = true;
            boilerFull = false;
            heaterPlateOn = true;
            valveClosed  = false;
        }

    }//GEN-LAST:event_BrewButtonActionPerformed

    private void FillBoilerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FillBoilerActionPerformed
        if(boilerFull == false){
            TextOutputFrame.append("Boiler full \n");
            boilerFull = true;
        }
        else{
            TextOutputFrame.append("Boiler empty. \n");
            boilerFull = false;
        }
    }//GEN-LAST:event_FillBoilerActionPerformed

    private void PotOnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PotOnOffActionPerformed
        if(potOnHeater == false){
            TextOutputFrame.append("Pot placed on heater. \n");
            potOnHeater = true;
        }
        else{
            TextOutputFrame.append("Pot removed from heater. \n");
            potOnHeater = false;
        }
    }//GEN-LAST:event_PotOnOffActionPerformed

    private void PowerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PowerButtonActionPerformed
        if(powerOn == false){
            TextOutputFrame.append("Power on. \n");
            powerOn = true;
        }
        else{
            TextOutputFrame.append("Power off. \n");
            powerOn = false;
        }
    }//GEN-LAST:event_PowerButtonActionPerformed

    private void FileMenuItemQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuItemQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_FileMenuItemQuitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CoffeeAndHeristicsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CoffeeAndHeristicsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CoffeeAndHeristicsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CoffeeAndHeristicsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CoffeeAndHeristicsGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AnimationFrame;
    private javax.swing.JButton BoilerElementState;
    private javax.swing.JButton BoilerWaterLevel;
    private javax.swing.JButton BrewButton;
    private javax.swing.JButton EmptyPot;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem FileMenuItemQuit;
    private javax.swing.JMenuItem FileMenuItemSave;
    private javax.swing.JButton FillBoiler;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JPanel MainWindowFrame;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JButton PotOnOff;
    private javax.swing.JButton PotWaterLevel;
    private javax.swing.JButton PowerButton;
    private javax.swing.JPanel SensorButtonFrame;
    private javax.swing.JButton SteamValveState;
    private javax.swing.JTextArea TextOutputFrame;
    private javax.swing.JScrollPane TextOutputScrollPanel;
    private javax.swing.JPanel UserButtonFrame;
    private javax.swing.JButton WarmerPlateElementState;
    // End of variables declaration//GEN-END:variables
}
